{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Whistlepost is a content-first web design platform that builds upon existing technologies and standards to offer a unique approach to website management. The content of a Whistlepost site consists of site structure, page copy and semantic metadata, which together convey the site's strategy and purpose. Visual layout and theming are secondary concerns with Whistlepost, as they can often become a distraction from the original goals and intention of the site. Content-first Whistlepost is designed to support just about any form of content through customization, however out-of-the-box content structure is based on Schema.org metadata. Schema.org is a collaboration between many prominent organizations to define common metadata for content published on the World Wide Web. As such this seems to be a good basis for default content metadata in Whistlepost. A default site content template is provided via a Github repository, and provides a suggested initial site structure along with some default site management metadata. Using this template as a basis provides an extremely easy way to begin designing a complete website with no web design experience necessary. In fact, when paired with Forestry.io, managing site content can be entirely GUI-based without any local checkout of source repositories. Schema.org All Whistlepost content is compliant with a corresponding Schema.org type, making it trivial to include metadata in published content. Schema.org metadata provides the benefit of improved Search Engine Optimization (SEO), maximising the reach to your potential target audience. Forestry.io Forestry.io is an online content management platform designed for static site generators, such as Hugo and Jekyll. However it turns out that Forestry.io is also versatile enough to manage site content defined in JSON files, which is essentially what Whistlepost content is. The default site content template includes predefined Front Matter and Sidebar sections to make it easy to get started defining content right away. The configuration sections provide Front Matter for configuration of site-wide properties such as branding, navigation, analytics and social media details. The pages sections represent the actual site structure and content, including a default homepage and collections for popular Schema.org content types. The initial homepage is configured to display a collection of articles with a single feature article as might be used for a blog or news site. However this can be changed simply by changing the template of the homepage, which could be more product- or event-focused, or maybe intended simply to promote a person or place. With Forestry.io and Whistlepost you are free to experiment with different site structures without rewriting the content you already have, which can be reassuring if you have built up years worth of content. Presentation Of course a website is not complete until it can be verified in a browser, and Whistlepost provides a variety of approaches to testing and publishing content. The Whistlepost publishing engine is built on Apache Sling , which has a unique approach to the separation of presentation and content that makes the content-first approach of Whistlepost possible. The content as defined in the Github repository mentioned above is pacakged as a bundle and deployed along with the Sling engine and a collection of other supporting bundles. This includes theming bundles that define the actual rendering of content in the browser, and Whistlepost provides an increasing array of theming options. A default site theme template is also provided via a Github repository, which can be used as the basis for defing your own custom site themes. The theme is where the visual design elements are developed, and may be as trivial or complex as is desired, and may support a range of modern frameworks such as Web Components, React, Bootstrap, etc. The default theme uses Bootstrap to provide visual design consistency and Thymeleaf for HTML templating. Thymeleaf Thymeleaf is a server-side template engine that integrates well with Apache Sling to define page fragments and layouts to define the presentation layer of a website. Thymeleaf provides good support for the Don't Repeat Yourself (DRY) principle by allowing HTML fragments to be included in multiple different pages as required. Apache Sling also includes support for other templating engines such as HTL, JSP and server-side JavaScript, which you are also free to use when defining website themes. The default theme includes support for rendering pages containing the supported Schema.org entities, including Article, Event, Person, Place, Recipe, etc. In addition various lists are supported for rendering collections, as well as different layouts for pages such as the homepage. Publishing The core Whistlepost engine is released as a Docker image, which may be used either locally for testing or deployed in a variety of containerisation platforms. When run locally content and/or themes may be mounted via filesystem bind mounts or packaged bundles. This make it easy to update content on-the-fly and see changes immediately in the browser. The ability to mount bundles on container instances also makes this approach well-suited to horizontally-scaled container platforms in that multiple instances can simultaneously share the same content and theming bundles avoiding the need for complex publishing procedures.","title":"Introduction"},{"location":"#overview","text":"Whistlepost is a content-first web design platform that builds upon existing technologies and standards to offer a unique approach to website management. The content of a Whistlepost site consists of site structure, page copy and semantic metadata, which together convey the site's strategy and purpose. Visual layout and theming are secondary concerns with Whistlepost, as they can often become a distraction from the original goals and intention of the site.","title":"Overview"},{"location":"#content-first","text":"Whistlepost is designed to support just about any form of content through customization, however out-of-the-box content structure is based on Schema.org metadata. Schema.org is a collaboration between many prominent organizations to define common metadata for content published on the World Wide Web. As such this seems to be a good basis for default content metadata in Whistlepost. A default site content template is provided via a Github repository, and provides a suggested initial site structure along with some default site management metadata. Using this template as a basis provides an extremely easy way to begin designing a complete website with no web design experience necessary. In fact, when paired with Forestry.io, managing site content can be entirely GUI-based without any local checkout of source repositories.","title":"Content-first"},{"location":"#schemaorg","text":"All Whistlepost content is compliant with a corresponding Schema.org type, making it trivial to include metadata in published content. Schema.org metadata provides the benefit of improved Search Engine Optimization (SEO), maximising the reach to your potential target audience.","title":"Schema.org"},{"location":"#forestryio","text":"Forestry.io is an online content management platform designed for static site generators, such as Hugo and Jekyll. However it turns out that Forestry.io is also versatile enough to manage site content defined in JSON files, which is essentially what Whistlepost content is. The default site content template includes predefined Front Matter and Sidebar sections to make it easy to get started defining content right away. The configuration sections provide Front Matter for configuration of site-wide properties such as branding, navigation, analytics and social media details. The pages sections represent the actual site structure and content, including a default homepage and collections for popular Schema.org content types. The initial homepage is configured to display a collection of articles with a single feature article as might be used for a blog or news site. However this can be changed simply by changing the template of the homepage, which could be more product- or event-focused, or maybe intended simply to promote a person or place. With Forestry.io and Whistlepost you are free to experiment with different site structures without rewriting the content you already have, which can be reassuring if you have built up years worth of content.","title":"Forestry.io"},{"location":"#presentation","text":"Of course a website is not complete until it can be verified in a browser, and Whistlepost provides a variety of approaches to testing and publishing content. The Whistlepost publishing engine is built on Apache Sling , which has a unique approach to the separation of presentation and content that makes the content-first approach of Whistlepost possible. The content as defined in the Github repository mentioned above is pacakged as a bundle and deployed along with the Sling engine and a collection of other supporting bundles. This includes theming bundles that define the actual rendering of content in the browser, and Whistlepost provides an increasing array of theming options. A default site theme template is also provided via a Github repository, which can be used as the basis for defing your own custom site themes. The theme is where the visual design elements are developed, and may be as trivial or complex as is desired, and may support a range of modern frameworks such as Web Components, React, Bootstrap, etc. The default theme uses Bootstrap to provide visual design consistency and Thymeleaf for HTML templating.","title":"Presentation"},{"location":"#thymeleaf","text":"Thymeleaf is a server-side template engine that integrates well with Apache Sling to define page fragments and layouts to define the presentation layer of a website. Thymeleaf provides good support for the Don't Repeat Yourself (DRY) principle by allowing HTML fragments to be included in multiple different pages as required. Apache Sling also includes support for other templating engines such as HTL, JSP and server-side JavaScript, which you are also free to use when defining website themes. The default theme includes support for rendering pages containing the supported Schema.org entities, including Article, Event, Person, Place, Recipe, etc. In addition various lists are supported for rendering collections, as well as different layouts for pages such as the homepage.","title":"Thymeleaf"},{"location":"#publishing","text":"The core Whistlepost engine is released as a Docker image, which may be used either locally for testing or deployed in a variety of containerisation platforms. When run locally content and/or themes may be mounted via filesystem bind mounts or packaged bundles. This make it easy to update content on-the-fly and see changes immediately in the browser. The ability to mount bundles on container instances also makes this approach well-suited to horizontally-scaled container platforms in that multiple instances can simultaneously share the same content and theming bundles avoiding the need for complex publishing procedures.","title":"Publishing"},{"location":"2016-11-04-getting-started/","text":"Whistlepost provides a Lazybones project template that is probably the simplest way to create a new Whistlepost site. The following steps outline how to use it: Install Lazybones via SDKMAN : $ curl -s \"https://get.sdkman.io\" | bash $ source \"$HOME/.sdkman/bin/sdkman-init.sh\" && sdk install lazybones Include the Whistlepost repository in configuration: $ lazybones set bintrayRepositories = [micronode/whistlepost, pledbrook/lazybones-templates] Create a new site skeleton using the Whistlepost template: $ lazybones create whistlepost-site <site directory> Build and run your new site in Docker: $ ./gradlew buildDocker && docker run --rm -p 8080:8080 <projectId> Open site in browser: http://localhost:8080/<projectId>","title":"Getting started!"},{"location":"2018-02-27-sling-10-support/","text":"The next Whistlepost release is now based on Apache Sling 10, which was recently released . This release introduces support for Java 9 and 10 along with many more updates. Check out the release notes to find out more.","title":"Apache Sling 10 Support"},{"location":"2018-06-18-deployment-models/","text":"Whistlepost is flexible in how it may be deployed in order to support both single and multi-tenancy configurations. Single tenant Tenancy refers to how many independent sites are simultaneously hosted. A single tenant approach is the simplest deployment model, however for some use cases it may also be more expensive in terms of resources. Containerisation Single tenancy provides the best support for containerisation, in that the entire site may be published as a container image and capitalise on all the benefits of containerisation such as horizontal scaling, rolling updates and/or blue-green deployments. Multi-tenancy A multi-tenancy model provides a single whistlepost instance that hosts multiple sites concurrently. Multi-tenancy offers a greater ability to scale with less resources, however at the expense of features such as horizontal scaling of the hosted sites.","title":"Whistlepost Deployment Models"},{"location":"2018-06-18-deployment-models/#single-tenant","text":"Tenancy refers to how many independent sites are simultaneously hosted. A single tenant approach is the simplest deployment model, however for some use cases it may also be more expensive in terms of resources.","title":"Single tenant"},{"location":"2018-06-18-deployment-models/#containerisation","text":"Single tenancy provides the best support for containerisation, in that the entire site may be published as a container image and capitalise on all the benefits of containerisation such as horizontal scaling, rolling updates and/or blue-green deployments.","title":"Containerisation"},{"location":"2018-06-18-deployment-models/#multi-tenancy","text":"A multi-tenancy model provides a single whistlepost instance that hosts multiple sites concurrently. Multi-tenancy offers a greater ability to scale with less resources, however at the expense of features such as horizontal scaling of the hosted sites.","title":"Multi-tenancy"},{"location":"author/","text":"Digital Content Authoring This page outlines how content authoring is supported with Whistlepost. Overview Digital content authoring is primarily focused on managing site content without concern for how the content is displayed on the live site. A content author will make use of the provided templates to populate content that combined with styling and appearance to render the final site. Whistlepost content is a collection of JSON documents arranged in a hierarchical structure that typically represents the published website structure. For example, if you have a collection of articles published at http://example.com/articles/ then you might have the JSON for those articles under /content/articles/ . Each JSON document will contain the metadata required to render the published content, including a reference to the intended page template to be used for rendering: { \"title\": \"My Whistlepost Site\", \"sling:resourceType\": \"wp/page/index\", \"show_advanced_settings\": false, \"jcr:primaryType\": \"nt:unstructured\", \"description\": \"\", \"author\": \"\" } Whistlepost provides some default templates for content, however ultimately you can design content templates to match just about any structure that you require. Editors Whilst some content can be sufficiently defined with plain text, sometimes there is a need for richer formatting and layouts. To support such content Whistlepost provides a selection of editors capable of capturing and rendering markup and rich content formats. Editor.js TBD. Prosemirror TBD. Mobiledoc TBD. Structured Content Whilst every Whistlepost site may choose to render content in unique ways, we can define some common structured metadata that is typical for a particular type of page. Using common types allows us to provide consistent formatting a layout of pages and page sections. Article A news article is typically defined to include a tile, an abstract, a cover image, and a body of text. Recipe A recipe consists of a title, an abstract, a cover image, a list of ingredients, and a method. Advertisement An advertisement may consist of a title, a thumbnail image and a full-size image. Collection A collection will consist of a title, a description, a page count (for paging resources), and a list of resources included in the collection. Sitemap TBD.","title":"Authoring"},{"location":"author/#digital-content-authoring","text":"This page outlines how content authoring is supported with Whistlepost.","title":"Digital Content Authoring"},{"location":"author/#overview","text":"Digital content authoring is primarily focused on managing site content without concern for how the content is displayed on the live site. A content author will make use of the provided templates to populate content that combined with styling and appearance to render the final site. Whistlepost content is a collection of JSON documents arranged in a hierarchical structure that typically represents the published website structure. For example, if you have a collection of articles published at http://example.com/articles/ then you might have the JSON for those articles under /content/articles/ . Each JSON document will contain the metadata required to render the published content, including a reference to the intended page template to be used for rendering: { \"title\": \"My Whistlepost Site\", \"sling:resourceType\": \"wp/page/index\", \"show_advanced_settings\": false, \"jcr:primaryType\": \"nt:unstructured\", \"description\": \"\", \"author\": \"\" } Whistlepost provides some default templates for content, however ultimately you can design content templates to match just about any structure that you require.","title":"Overview"},{"location":"author/#editors","text":"Whilst some content can be sufficiently defined with plain text, sometimes there is a need for richer formatting and layouts. To support such content Whistlepost provides a selection of editors capable of capturing and rendering markup and rich content formats.","title":"Editors"},{"location":"author/#editorjs","text":"TBD.","title":"Editor.js"},{"location":"author/#prosemirror","text":"TBD.","title":"Prosemirror"},{"location":"author/#mobiledoc","text":"TBD.","title":"Mobiledoc"},{"location":"author/#structured-content","text":"Whilst every Whistlepost site may choose to render content in unique ways, we can define some common structured metadata that is typical for a particular type of page. Using common types allows us to provide consistent formatting a layout of pages and page sections.","title":"Structured Content"},{"location":"author/#article","text":"A news article is typically defined to include a tile, an abstract, a cover image, and a body of text.","title":"Article"},{"location":"author/#recipe","text":"A recipe consists of a title, an abstract, a cover image, a list of ingredients, and a method.","title":"Recipe"},{"location":"author/#advertisement","text":"An advertisement may consist of a title, a thumbnail image and a full-size image.","title":"Advertisement"},{"location":"author/#collection","text":"A collection will consist of a title, a description, a page count (for paging resources), and a list of resources included in the collection.","title":"Collection"},{"location":"author/#sitemap","text":"TBD.","title":"Sitemap"},{"location":"content/","text":"Whistlepost Content Management Whistlepost provides an opinionated content management structure to help with rapid site development. Using this structure you can have a basic site up and running in minutes. Overview Whistlepost content consists of a tree of folders containing JSON documents that describe the site configuration and content structure. Site configuration files provide rendering hints such as banners, references and shared footers, whereas content files provide text and images used to render individual pages. Site Configuration Branding TBD. Navigation TBD. Footer TBD. Page Analytics TBD. Sitemap TBD. Robots.txt TBD. Page Comments TBD. Social Links TBD. Feed TBD. Calendar TBD. Site Content Homepage TBD. About TBD. Articles TBD. Audio TBD. Categories TBD. Events TBD. Gallery TBD. Licenses TBD. Organizations TBD. People TBD. Places TBD. Products TBD. Recipes TBD. Services TBD. Video TBD.","title":"Content Management"},{"location":"content/#whistlepost-content-management","text":"Whistlepost provides an opinionated content management structure to help with rapid site development. Using this structure you can have a basic site up and running in minutes.","title":"Whistlepost Content Management"},{"location":"content/#overview","text":"Whistlepost content consists of a tree of folders containing JSON documents that describe the site configuration and content structure. Site configuration files provide rendering hints such as banners, references and shared footers, whereas content files provide text and images used to render individual pages.","title":"Overview"},{"location":"content/#site-configuration","text":"","title":"Site Configuration"},{"location":"content/#branding","text":"TBD.","title":"Branding"},{"location":"content/#navigation","text":"TBD.","title":"Navigation"},{"location":"content/#footer","text":"TBD.","title":"Footer"},{"location":"content/#page-analytics","text":"TBD.","title":"Page Analytics"},{"location":"content/#sitemap","text":"TBD.","title":"Sitemap"},{"location":"content/#robotstxt","text":"TBD.","title":"Robots.txt"},{"location":"content/#page-comments","text":"TBD.","title":"Page Comments"},{"location":"content/#social-links","text":"TBD.","title":"Social Links"},{"location":"content/#feed","text":"TBD.","title":"Feed"},{"location":"content/#calendar","text":"TBD.","title":"Calendar"},{"location":"content/#site-content","text":"","title":"Site Content"},{"location":"content/#homepage","text":"TBD.","title":"Homepage"},{"location":"content/#about","text":"TBD.","title":"About"},{"location":"content/#articles","text":"TBD.","title":"Articles"},{"location":"content/#audio","text":"TBD.","title":"Audio"},{"location":"content/#categories","text":"TBD.","title":"Categories"},{"location":"content/#events","text":"TBD.","title":"Events"},{"location":"content/#gallery","text":"TBD.","title":"Gallery"},{"location":"content/#licenses","text":"TBD.","title":"Licenses"},{"location":"content/#organizations","text":"TBD.","title":"Organizations"},{"location":"content/#people","text":"TBD.","title":"People"},{"location":"content/#places","text":"TBD.","title":"Places"},{"location":"content/#products","text":"TBD.","title":"Products"},{"location":"content/#recipes","text":"TBD.","title":"Recipes"},{"location":"content/#services","text":"TBD.","title":"Services"},{"location":"content/#video","text":"TBD.","title":"Video"},{"location":"forestry/","text":"Publishing with Forestry.io This page outlines how to use Forestry.io to publish Whistlepost content. Overview Forestry.io is an online content management tool targeting content for static site generators such as Hugo, Jekyll, Gatsby, etc. However this tool is versatile enough to support custom content formats, including JSON as used to manage Whistlepost content. The added benefit of Forestry.io is that you can integrate with version control and content storage tools such as GitHub and AWS S3, thus providing you will full control over your content management. Getting Started First you will need to sign up to Forestry.io , with one of the provided plans. The free plan is sufficient for single user content management, however for larger teams you may need to consider the paid plans. After signing you may then create a new site from the dashboard. Select the Git provider where you will store your content. On the next page, after authorizing access to your repositories select the repository where you will store your site content. After clicking Next Forestry.io will import the content from your repository to construct a site dashboard. Creating templates In Forestry Front Matter Templates are used to define the structure of content documents. We can use templates to define how Whistlepost content should be saved. Navigate to Front Matter and click Add Template . Click to create a new blank template. Provide a name for the new template and select the option for Fields (without content area). Define content fields for the template using the Add Field button. Typically we use the Text Field option to define a single row content field.","title":"Forestry"},{"location":"forestry/#publishing-with-forestryio","text":"This page outlines how to use Forestry.io to publish Whistlepost content.","title":"Publishing with Forestry.io"},{"location":"forestry/#overview","text":"Forestry.io is an online content management tool targeting content for static site generators such as Hugo, Jekyll, Gatsby, etc. However this tool is versatile enough to support custom content formats, including JSON as used to manage Whistlepost content. The added benefit of Forestry.io is that you can integrate with version control and content storage tools such as GitHub and AWS S3, thus providing you will full control over your content management.","title":"Overview"},{"location":"forestry/#getting-started","text":"First you will need to sign up to Forestry.io , with one of the provided plans. The free plan is sufficient for single user content management, however for larger teams you may need to consider the paid plans. After signing you may then create a new site from the dashboard. Select the Git provider where you will store your content. On the next page, after authorizing access to your repositories select the repository where you will store your site content. After clicking Next Forestry.io will import the content from your repository to construct a site dashboard.","title":"Getting Started"},{"location":"forestry/#creating-templates","text":"In Forestry Front Matter Templates are used to define the structure of content documents. We can use templates to define how Whistlepost content should be saved. Navigate to Front Matter and click Add Template . Click to create a new blank template. Provide a name for the new template and select the option for Fields (without content area). Define content fields for the template using the Add Field button. Typically we use the Text Field option to define a single row content field.","title":"Creating templates"},{"location":"i18n/","text":"Whistlepost Internationalisation (I18N) Support for multiple languages across shared components that are used to build user interfaces and websites. Overview Whistlepost Internationalisation (I18N) provides the text content for shared components provided by the Whistlepost application and content. This includes things like labels for form fields, menus and footer text. Supported Languages TBD. Message Keys TBD. Customised Internationalisation (I18N) Support TBD.","title":"Whistlepost Internationalisation (I18N)"},{"location":"i18n/#whistlepost-internationalisation-i18n","text":"Support for multiple languages across shared components that are used to build user interfaces and websites.","title":"Whistlepost Internationalisation (I18N)"},{"location":"i18n/#overview","text":"Whistlepost Internationalisation (I18N) provides the text content for shared components provided by the Whistlepost application and content. This includes things like labels for form fields, menus and footer text.","title":"Overview"},{"location":"i18n/#supported-languages","text":"TBD.","title":"Supported Languages"},{"location":"i18n/#message-keys","text":"TBD.","title":"Message Keys"},{"location":"i18n/#customised-internationalisation-i18n-support","text":"TBD.","title":"Customised Internationalisation (I18N) Support"},{"location":"models/","text":"Whistlepost Models Model objects in Apache Sling provide support for common functionality that promotes encapsulation and reduces duplicate logic. Whistlepost models focus on the elements of website patterns and the types of data that are commonly published. Presentation The following Whistlepost models represent presentation aspects of a website. Layout A layout model provides support for website layout elements, including the common resources that are rendered on all site pages, such as headers, footers and navigation. Navigation The navigation model supports configuration of site navigation elements, which are typically positioned towards the top and bottom of the site. Each of the supported navigation collections provide a list of site resources to be rendered. Branding Site branding provides common images and text used in all pages to identify a site. Metadata Meta TBD. OpenGraph TBD. Site Information Legal TBD. Licenses TBD. Site Integration Analytics TBD. Comments TBD. Social Media TBD. Non-HTML The following models provide support for non-HTML content commonly found in websites. Sitemap TBD. Robots TBD. Feeds TBD. Calendars TBD.","title":"Models"},{"location":"models/#whistlepost-models","text":"Model objects in Apache Sling provide support for common functionality that promotes encapsulation and reduces duplicate logic. Whistlepost models focus on the elements of website patterns and the types of data that are commonly published.","title":"Whistlepost Models"},{"location":"models/#presentation","text":"The following Whistlepost models represent presentation aspects of a website.","title":"Presentation"},{"location":"models/#layout","text":"A layout model provides support for website layout elements, including the common resources that are rendered on all site pages, such as headers, footers and navigation.","title":"Layout"},{"location":"models/#navigation","text":"The navigation model supports configuration of site navigation elements, which are typically positioned towards the top and bottom of the site. Each of the supported navigation collections provide a list of site resources to be rendered.","title":"Navigation"},{"location":"models/#branding","text":"Site branding provides common images and text used in all pages to identify a site.","title":"Branding"},{"location":"models/#metadata","text":"","title":"Metadata"},{"location":"models/#meta","text":"TBD.","title":"Meta"},{"location":"models/#opengraph","text":"TBD.","title":"OpenGraph"},{"location":"models/#site-information","text":"","title":"Site Information"},{"location":"models/#legal","text":"TBD.","title":"Legal"},{"location":"models/#licenses","text":"TBD.","title":"Licenses"},{"location":"models/#site-integration","text":"","title":"Site Integration"},{"location":"models/#analytics","text":"TBD.","title":"Analytics"},{"location":"models/#comments","text":"TBD.","title":"Comments"},{"location":"models/#social-media","text":"TBD.","title":"Social Media"},{"location":"models/#non-html","text":"The following models provide support for non-HTML content commonly found in websites.","title":"Non-HTML"},{"location":"models/#sitemap","text":"TBD.","title":"Sitemap"},{"location":"models/#robots","text":"TBD.","title":"Robots"},{"location":"models/#feeds","text":"TBD.","title":"Feeds"},{"location":"models/#calendars","text":"TBD.","title":"Calendars"},{"location":"publish/","text":"Publishing Content Templates Templates are used to render the content to a particular output format, such as HTML. Every content node defines a default template that is used when the content is requested. Templates may be defined in multiple languages, with the most common being JavaScript (ESP), Thymeleaf, and Groovy Markup. ESP TBD. Thymeleaf TBD. Groovy Markup TBD. Models Models provide a mechanism for accessing and validating content when rendering with templates. Whistlepost provides some common model types to represent the structured content mentioned in the authoring section. Article TBD. Recipe TBD. Advertisement TBD. Collection TBD. Static Assets Rendering content as HTML will typically require additional static files such as style documents (CSS), media (e.g. images, video, etc.), fonts and Javascript. Whistlepost manages static assets separately from the templates to allow for improved management of site assets. For example, you may choose to use a package management tool or bundler to package assets, which may require some compilation tasks as part of the buid. NPM The Node Package Manager (NPM) provides a way to easily manage your client JavaScript libraries and include them in your site static assets. Yarn may also be used in place of NPM, which provides similar functionality. Webpack A common approach is to use Webpack to package all CSS, fonts and JavaScript to a single set of files that may be referenced in the site templates.","title":"Publishing"},{"location":"publish/#publishing-content","text":"","title":"Publishing Content"},{"location":"publish/#templates","text":"Templates are used to render the content to a particular output format, such as HTML. Every content node defines a default template that is used when the content is requested. Templates may be defined in multiple languages, with the most common being JavaScript (ESP), Thymeleaf, and Groovy Markup.","title":"Templates"},{"location":"publish/#esp","text":"TBD.","title":"ESP"},{"location":"publish/#thymeleaf","text":"TBD.","title":"Thymeleaf"},{"location":"publish/#groovy-markup","text":"TBD.","title":"Groovy Markup"},{"location":"publish/#models","text":"Models provide a mechanism for accessing and validating content when rendering with templates. Whistlepost provides some common model types to represent the structured content mentioned in the authoring section.","title":"Models"},{"location":"publish/#article","text":"TBD.","title":"Article"},{"location":"publish/#recipe","text":"TBD.","title":"Recipe"},{"location":"publish/#advertisement","text":"TBD.","title":"Advertisement"},{"location":"publish/#collection","text":"TBD.","title":"Collection"},{"location":"publish/#static-assets","text":"Rendering content as HTML will typically require additional static files such as style documents (CSS), media (e.g. images, video, etc.), fonts and Javascript. Whistlepost manages static assets separately from the templates to allow for improved management of site assets. For example, you may choose to use a package management tool or bundler to package assets, which may require some compilation tasks as part of the buid.","title":"Static Assets"},{"location":"publish/#npm","text":"The Node Package Manager (NPM) provides a way to easily manage your client JavaScript libraries and include them in your site static assets. Yarn may also be used in place of NPM, which provides similar functionality.","title":"NPM"},{"location":"publish/#webpack","text":"A common approach is to use Webpack to package all CSS, fonts and JavaScript to a single set of files that may be referenced in the site templates.","title":"Webpack"},{"location":"schema/","text":"Schema.org This page describes the supported Schema.org entities in Whistlepost. Overview Whistlepost uses schema.org as the basis for content structure. This has the following benefits: Familiarity of structure for content producers Implicit support for semantic web formats (e.g microdata, JSON-LD, etc.) Better Search Engine Optimization (SEO) Supported Types The following schema.org types are supported in Whistlepost content: CreativeWork WebPage Article Recipe Event Person Place","title":"Schema.org"},{"location":"schema/#schemaorg","text":"This page describes the supported Schema.org entities in Whistlepost.","title":"Schema.org"},{"location":"schema/#overview","text":"Whistlepost uses schema.org as the basis for content structure. This has the following benefits: Familiarity of structure for content producers Implicit support for semantic web formats (e.g microdata, JSON-LD, etc.) Better Search Engine Optimization (SEO)","title":"Overview"},{"location":"schema/#supported-types","text":"The following schema.org types are supported in Whistlepost content: CreativeWork WebPage Article Recipe Event Person Place","title":"Supported Types"},{"location":"templates/","text":"Whistlepost Templates Templates are used to provide support for established patterns for website construction. Pages The following templates are used to construct site pages. Feature TBD. App TBD. Article TBD. Calendar TBD. Feed TBD. Recipe TBD. Robots TBD. Sitemap TBD. Fragments The following templates provide HTML fragments used across multiple page implementations. Analytics TBD. Branding TBD. Comments TBD. Head TBD. Legal TBD. List TBD. Nav TBD.","title":"Templates"},{"location":"templates/#whistlepost-templates","text":"Templates are used to provide support for established patterns for website construction.","title":"Whistlepost Templates"},{"location":"templates/#pages","text":"The following templates are used to construct site pages.","title":"Pages"},{"location":"templates/#feature","text":"TBD.","title":"Feature"},{"location":"templates/#app","text":"TBD.","title":"App"},{"location":"templates/#article","text":"TBD.","title":"Article"},{"location":"templates/#calendar","text":"TBD.","title":"Calendar"},{"location":"templates/#feed","text":"TBD.","title":"Feed"},{"location":"templates/#recipe","text":"TBD.","title":"Recipe"},{"location":"templates/#robots","text":"TBD.","title":"Robots"},{"location":"templates/#sitemap","text":"TBD.","title":"Sitemap"},{"location":"templates/#fragments","text":"The following templates provide HTML fragments used across multiple page implementations.","title":"Fragments"},{"location":"templates/#analytics","text":"TBD.","title":"Analytics"},{"location":"templates/#branding","text":"TBD.","title":"Branding"},{"location":"templates/#comments","text":"TBD.","title":"Comments"},{"location":"templates/#head","text":"TBD.","title":"Head"},{"location":"templates/#legal","text":"TBD.","title":"Legal"},{"location":"templates/#list","text":"TBD.","title":"List"},{"location":"templates/#nav","text":"TBD.","title":"Nav"},{"location":"extensions/","text":"Overview","title":"Overview"},{"location":"extensions/#overview","text":"","title":"Overview"},{"location":"releases/","text":"Release Notes","title":"Release Notes"},{"location":"releases/#release-notes","text":"","title":"Release Notes"},{"location":"schema/article/","text":"Article This page outlines the content structure and typical display approach for articles. Overview An article represents a body of text and optional media that comprise a published document, such as a Blog post or News article. Content metadata The following table shows the metadata properties used to store an article's content. Metadata Description Abstract Article abstract Author Primary author of the Article Date Published Date on which article was first published Headline Title of the article Keywords Keywords or topics related to the article Text Body of the article Image An image to embed in the article","title":"Article"},{"location":"schema/article/#article","text":"This page outlines the content structure and typical display approach for articles.","title":"Article"},{"location":"schema/article/#overview","text":"An article represents a body of text and optional media that comprise a published document, such as a Blog post or News article.","title":"Overview"},{"location":"schema/article/#content-metadata","text":"The following table shows the metadata properties used to store an article's content. Metadata Description Abstract Article abstract Author Primary author of the Article Date Published Date on which article was first published Headline Title of the article Keywords Keywords or topics related to the article Text Body of the article Image An image to embed in the article","title":"Content metadata"},{"location":"schema/event/","text":"","title":"Event"},{"location":"schema/global/","text":"Global Templates This page outlines the available global templates and their purpose. Overview Global templates are a special kind of template that applies across an entire site. This may include things like navigation controls, logos, analytics configuration, etc. Branding The _branding template is used to control the site mastead, which includes logos and site branding. Navigation TBD. Footer TBD. Analytics TBD. Sitemap TBD. Robots TBD. Feed TBD.","title":"Global Templates"},{"location":"schema/global/#global-templates","text":"This page outlines the available global templates and their purpose.","title":"Global Templates"},{"location":"schema/global/#overview","text":"Global templates are a special kind of template that applies across an entire site. This may include things like navigation controls, logos, analytics configuration, etc.","title":"Overview"},{"location":"schema/global/#branding","text":"The _branding template is used to control the site mastead, which includes logos and site branding.","title":"Branding"},{"location":"schema/global/#navigation","text":"TBD.","title":"Navigation"},{"location":"schema/global/#footer","text":"TBD.","title":"Footer"},{"location":"schema/global/#analytics","text":"TBD.","title":"Analytics"},{"location":"schema/global/#sitemap","text":"TBD.","title":"Sitemap"},{"location":"schema/global/#robots","text":"TBD.","title":"Robots"},{"location":"schema/global/#feed","text":"TBD.","title":"Feed"},{"location":"schema/place/","text":"","title":"Place"},{"location":"schema/product/","text":"","title":"Product"},{"location":"schema/recipe/","text":"","title":"Recipe"}]}